// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id        String    @id @default(cuid())
  name      String
  venues    Venue[]
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model Venue {
  id              String         @id @default(cuid())
  name            String
  chain           Chain?         @relation(fields: [chainId], references: [id])
  chainId         String?
  address         String
  city            String
  country         String?
  utc             String?        @default("-6")
  phone           String?
  email           String         @unique
  language        String?        @default("es")
  image           String
  logo            String?
  rating          Float?
  rating_quantity Int?
  cuisine         String
  wifiName        String?
  wifiPassword    String?
  tipPercentage1  String         @default("0.10")
  tipPercentage2  String         @default("0.15")
  tipPercentage3  String         @default("0.20")
  paymentMethods  String[]       @default(["card"])
  tables          Table[]
  users           User[]
  feedbacks       Feedback[]
  payments        Payment[]
  notifications   Notification[]

  stripeAccountId String?
  updatedAt       DateTime? @updatedAt
  createdAt       DateTime  @default(now())
}

model Role {
  id          String       @id @unique @default(cuid())
  name        String       @unique
  users       User[]
  permissions Permission[]
  updatedAt   DateTime?    @updatedAt
  createdAt   DateTime     @default(now())
}

model PermissionType {
  id          String       @id @default(cuid())
  name        String
  permissions Permission[]
  updatedAt   DateTime?    @updatedAt
  createdAt   DateTime     @default(now())
}

model Permission {
  id               String          @id @unique @default(cuid())
  name             String          @unique
  roleId           String?
  roles            Role?           @relation(fields: [roleId], references: [id])
  permissiontypeId String?
  permissiontype   PermissionType? @relation(fields: [permissiontypeId], references: [id])
  updatedAt        DateTime?       @updatedAt
  createdAt        DateTime        @default(now())
}

model User {
  id                String             @id @default(cuid())
  token             String?
  username          String?            @unique
  email             String?            @unique
  allergens         Allergens[]
  image             String?
  phone             String?
  password          String?
  color             String?
  tips              Tip[]
  paid              Decimal?
  roleId            String?
  roles             Role?              @relation(fields: [roleId], references: [id])
  venue             Venue?             @relation(fields: [venueId], references: [id])
  venueId           String?
  payments          Payment[]
  usertables        UserTable[]
  sessions          Session[]
  preferencesclient PreferenceClient[]
  availabilities    Availabilities[]
  updatedAt         DateTime?          @updatedAt
  createdAt         DateTime           @default(now())
  Password          Password?
}

model Allergens {
  id        String    @id @default(cuid())
  name      String
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Session {
  id             String    @id @default(uuid())
  active         Boolean   @default(true)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
  updatedAt      DateTime? @updatedAt
  createdAt      DateTime  @default(now())
}

model Password {
  id        String    @id @default(cuid())
  hash      String
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String?   @unique
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model Table {
  tableNumber Int
  status      StatusTable? @default(INACTIVE)
  bill        Bill?        @relation(fields: [billId], references: [id])
  billId      String?      @unique
  floorId     String?
  locationId  String?
  seats       Int?
  venue       Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venueId     String
  // usertables  UserTable[]
  updatedAt   DateTime?    @updatedAt
  createdAt   DateTime     @default(now())

  @@id(name: "tableId", [tableNumber, venueId])
}

model Bill {
  id            String         @id @default(cuid())
  key           String?
  status        StatusBills?   @default(PENDING)
  tableNumber   Int?
  total         Decimal?
  active        Boolean?
  products      Product[]
  usertable     UserTable?     @relation(fields: [usertableId], references: [id])
  usertableId   String?
  billdetails   BillDetails[]
  payments      Payment[]
  notifications Notification[]
  table         Table[]
  tips          Tip[]
  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())
}

model UserTable {
  id            String         @id @default(cuid())
  // table         Table          @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // tableId       String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  feedbacks     Feedback[]
  notifications Notification[]
  bills         Bill[]
  updatedAt     DateTime?      @updatedAt
  createdAt     DateTime       @default(now())
}

model Category {
  id             String           @id @default(cuid())
  name           String
  image          String?
  displayBill    Int?
  description    String?
  pdf            Boolean?         @default(false)
  active         Boolean?
  products       Product[]
  availabilities Availabilities[]
  updatedAt      DateTime?        @updatedAt
  createdAt      DateTime         @default(now())
}

model Product {
  id             String           @id @default(cuid())
  key            String?
  name           String
  //best name for turning off or on
  quantity       Int?             @default(1)
  punitario      Decimal?
  tax            Decimal?
  price          Decimal
  productType    Int? //Products 1, Modifiers 2, Modifier Groups 3, and Bundles 4
  available      Boolean?
  categoryId     String?
  category       Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billId         String?
  bill           Bill?            @relation(fields: [billId], references: [id], onUpdate: Cascade)
  combodetails   ComboDetails[]
  availabilities Availabilities[]

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
  // BillDetails BillDetails[]
}

model Availabilities {
  id         String    @id @default(cuid())
  dayOfWeek  Int?
  startTime  String?
  endTime    String?
  product    Product?  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  updatedAt  DateTime? @updatedAt
  createdAt  DateTime  @default(now())
}

model BillDetails {
  id               String            @id @default(cuid())
  plu              String?
  price            Float
  quantity         Int
  billId           String?
  bill             Bill?             @relation(fields: [billId], references: [id])
  // productId        String?
  // product          Product?          @relation(fields: [productId], references: [id])
  comments         String?
  paid             Boolean?          @default(false)
  paidBy           String?
  active           Boolean?
  productModifiers ProductModifier[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model Payment {
  id            String          @id @default(cuid())
  method        PaymentMethod
  status        StatusPayments? @default(PENDING)
  amount        Decimal
  avoFee        Decimal?
  tips          Tip[]
  billId        String?
  bill          Bill?           @relation(fields: [billId], references: [id])
  userId        String?
  user          User?           @relation(fields: [userId], references: [id])
  notifications Notification[]
  venue         Venue?          @relation(fields: [venueId], references: [id])
  venueId       String?
  updatedAt     DateTime?       @updatedAt
  createdAt     DateTime        @default(now())
}

model Tip {
  id         String    @id @default(cuid())
  amount     Decimal
  percentage Decimal
  billId     String?
  bill       Bill?     @relation(fields: [billId], references: [id])
  updatedAt  DateTime? @updatedAt
  createdAt  DateTime  @default(now())
  payment    Payment?  @relation(fields: [paymentId], references: [id])
  paymentId  String?
  users      User[]
}

//NOTE - MODIFIY
model Notification {
  id          String              @id @default(cuid())
  method      NotificationMethod?
  type        String?
  type_temp   NotificationType?
  status      StatusNotification?
  message     String?
  venueId     String?
  venue       Venue?              @relation(fields: [venueId], references: [id])
  usertableId String?
  usertable   UserTable?          @relation(fields: [usertableId], references: [id])
  billId      String?
  bill        Bill?               @relation(fields: [billId], references: [id])
  paymentId   String?
  payment     Payment?            @relation(fields: [paymentId], references: [id])
  updatedAt   DateTime?           @updatedAt
  createdAt   DateTime            @default(now())
}

model Combo {
  id           String         @id @default(cuid())
  name         String?
  dateFrom     DateTime?
  dateTo       DateTime?
  active       Boolean?
  combodetails ComboDetails[]
  updatedAt    DateTime?      @updatedAt
  createdAt    DateTime       @default(now())
}

model ComboDetails {
  id        String    @id @default(cuid())
  price     Float?
  quantity  Int?
  active    Boolean?
  productId String?
  product   Product?  @relation(fields: [productId], references: [id])
  comoboId  String?
  combo     Combo?    @relation(fields: [comoboId], references: [id])
  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model Feedback {
  id           String        @id @default(cuid())
  description  String?
  active       Boolean?
  feedbacktype FeedbackType?
  usertableId  String?
  usertable    UserTable?    @relation(fields: [usertableId], references: [id])
  updatedAt    DateTime?     @updatedAt
  createdAt    DateTime      @default(now())
  venue        Venue?        @relation(fields: [venueId], references: [id])
  venueId      String?
}

model PreferenceClient {
  id             String          @id @default(cuid())
  description    String?
  active         Boolean?
  preferencetype PreferenceType?
  userId         String?
  user           User?           @relation(fields: [userId], references: [id])
  updatedAt      DateTime?       @updatedAt
  createdAt      DateTime        @default(now())
}

model ModifierGroup {
  id        String      @id @default(cuid())
  name      String?
  available Boolean?    @default(true)
  plu       String?     @unique
  max       Int?        @default(0)
  min       Int?        @default(0)
  multiMax  Int?        @default(1)
  multiply  Int?        @default(0)
  active    Boolean?
  modifiers Modifiers[]

  updatedAt DateTime? @updatedAt
  createdAt DateTime  @default(now())
}

model Modifiers {
  id               String            @id @default(cuid())
  name             String?
  available        Boolean?          @default(true)
  plu              String?           @unique
  max              Int?              @default(0)
  min              Int?              @default(0)
  multiply         Int?              @default(0)
  extraPrice       Decimal?
  modifierGroups   ModifierGroup?    @relation(fields: [modifierGroupId], references: [id])
  modifierGroupId  String?
  productmodifiers ProductModifier[]
  updatedAt        DateTime?         @updatedAt
  createdAt        DateTime          @default(now())
}

model ProductModifier {
  id           String       @id @default(cuid())
  name         String?
  quantity     Int?         @default(0)
  plu          String?      @unique
  extraPrice   Decimal?
  total        Decimal?
  billdetails  BillDetails? @relation(fields: [billdetailId], references: [id])
  billdetailId String?
  modifiers    Modifiers?   @relation(fields: [modifierId], references: [id])
  modifierId   String?
  updatedAt    DateTime?    @updatedAt
  createdAt    DateTime     @default(now())
}

enum PreferenceType {
  dietary_restrictions
  dishes
  payment_methods
}

enum FeedbackType {
  waiter
  manager
  place
  dish
}

enum NotificationMethod {
  email
  sms
  push
  whatsapp
}

enum NotificationType {
  CALL
  ORDER
  PAYMENT
  FEEDBACK
  INFORMATIVE
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  STRIPE
}

enum StatusPayments {
  ACCEPTED
  REJECTED
  PENDING
}

enum StatusBills {
  OPEN
  PAID
  PENDING
  CLOSED
  CANCELED
}

enum StatusNotification {
  pending
  rejected
  sending
}

enum StatusTable {
  ACTIVE
  INACTIVE
}
